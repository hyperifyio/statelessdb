// Copyright (c) 2024. Jaakko Heusala <jheusala@iki.fi>. All rights reserved.
// Licensed under the FSL-1.1-MIT, see LICENSE.md in the project root for details.

package z3b

import (
	"fmt"
	"sync"
)

// Constants
const (
	bufferSize = 4096 // Default buffer size
	separator1 = '_'  // Set +1 set control character
	separator2 = '-'  // Set +2 set control character
	separator3 = '$'  // Set +3 set control character
	separator4 = '`'  // Set +4 set control character
	separator5 = '!'  // Set +5 set control character
	separator6 = ' '  // Set +6 set control character

	invalidCharacter = '"' // Invalid character

	printableSet  = "#%&()*+,./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~" // Data characters
	printableSet2 = "-_$`! "                                                                                 // These can be used for control
	printableSet3 = "'\"\\"                                                                                  // We don't use these because JSON escaping

	numSets    = 7   // Number of binary sets
	setSize    = 86  // Number of characters in printableSet
	totalBytes = 256 // Total number of byte values (0-255)
)

// Binary Sets: Each set maps to a unique range of byte values.
var (
	binarySet1 = [setSize]byte{
		0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
		0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
		0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
		0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D,
	}

	binarySet2 = [setSize]byte{
		0x02, 0x04, 0x05, 0x08, 0x0a, 0x0d, 0x0e, 0x0f,
		0x12, 0x13, 0x14, 0x19, 0x1a, 0x1b, 0x20, 0x25,
		0x26, 0x2d, 0x31, 0x36, 0x3d, 0x40, 0x43, 0x45,
		0x47, 0x4c, 0x4f, 0x5d, 0x62, 0x63, 0x66, 0x69,
		0x6b, 0x6c, 0x71, 0x75, 0x78, 0x7c, 0x81, 0x82,
		0x84, 0x85, 0x87, 0x8d, 0x93, 0x96, 0x97, 0x9b,
		0x9c, 0x9d, 0x9e, 0xa0, 0xa6, 0xa8, 0xa9, 0xaa,
		0xac, 0xb6, 0xb7, 0xbd, 0xc0, 0xc1, 0xc6, 0xca,
		0xcc, 0xd0, 0xd1, 0xd2, 0xd4, 0xd6, 0xd8, 0xde,
		0xdf, 0xe0, 0xe4, 0xe6, 0xe8, 0xee, 0xf0, 0xf1,
		0xf4, 0xf5, 0xf7, 0xf8, 0xfc, 0xfe,
	}

	binarySet3 = [setSize]byte{
		0x01, 0x07, 0x09, 0x0c, 0x11, 0x17, 0x22, 0x23,
		0x28, 0x2c, 0x32, 0x38, 0x3b, 0x3c, 0x3e, 0x3f,
		0x44, 0x46, 0x48, 0x49, 0x4a, 0x4b, 0x4e, 0x51,
		0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x5e,
		0x60, 0x61, 0x64, 0x65, 0x67, 0x68, 0x6e, 0x73,
		0x77, 0x79, 0x7a, 0x7d, 0x80, 0x83, 0x8a, 0x8b,
		0x8e, 0x8f, 0x90, 0x98, 0x9a, 0xa1, 0xa4, 0xa5,
		0xa7, 0xaf, 0xb0, 0xb1, 0xb4, 0xb5, 0xb8, 0xb9,
		0xba, 0xbb, 0xbe, 0xc3, 0xc4, 0xc9, 0xce, 0xd3,
		0xd5, 0xd9, 0xda, 0xdc, 0xe3, 0xe9, 0xea, 0xeb,
		0xed, 0xef, 0xf2, 0xf3, 0xf6, 0xff,
	}

	binarySet4 = [setSize]byte{
		0x00, 0x03, 0x06, 0x0b, 0x10, 0x15, 0x16, 0x18,
		0x1c, 0x1d, 0x1e, 0x1f, 0x21, 0x24, 0x27, 0x29,
		0x2a, 0x2b, 0x2e, 0x2f, 0x30, 0x33, 0x34, 0x35,
		0x37, 0x39, 0x3a, 0x41, 0x42, 0x46, 0x4d, 0x50,
		0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5f, 0x6a, 0x6d,
		0x6f, 0x70, 0x72, 0x74, 0x76, 0x7b, 0x7e, 0x7f,
		0x86, 0x88, 0x89, 0x8c, 0x91, 0x92, 0x94, 0x95,
		0x99, 0x9f, 0xa2, 0xa3, 0xab, 0xad, 0xae, 0xb2,
		0xb3, 0xbc, 0xbf, 0xc2, 0xc5, 0xc7, 0xc8, 0xcb,
		0xcd, 0xcf, 0xd7, 0xdb, 0xdd, 0xe1, 0xe2, 0xe5,
		0xe7, 0xec, 0xf9, 0xfa, 0xfb, 0xfd,
	}

	binarySet5 = [setSize]byte{
		0x06, 0x08, 0x09, 0x0a, 0x0e, 0x0f, 0x17, 0x18,
		0x1a, 0x1c, 0x20, 0x21, 0x25, 0x26, 0x27, 0x2e,
		0x30, 0x3a, 0x3d, 0x3f, 0x43, 0x44, 0x47, 0x48,
		0x4c, 0x4d, 0x51, 0x52, 0x5b, 0x61, 0x63, 0x67,
		0x6d, 0x6e, 0x76, 0x79, 0x7c, 0x7d, 0x81, 0x82,
		0x86, 0x88, 0x93, 0x96, 0x98, 0x99, 0x9a, 0x9c,
		0x9d, 0xa5, 0xa8, 0xac, 0xae, 0xb2, 0xb4, 0xb8,
		0xbd, 0xbe, 0xbf, 0xc1, 0xc3, 0xc8, 0xcb, 0xcd,
		0xcf, 0xd0, 0xd1, 0xd3, 0xd5, 0xd6, 0xda, 0xdb,
		0xdd, 0xde, 0xe0, 0xe1, 0xe7, 0xe8, 0xea, 0xeb,
		0xef, 0xf0, 0xf2, 0xf8, 0xf9, 0xff,
	}

	binarySet6 = [setSize]byte{
		0x00, 0x02, 0x03, 0x04, 0x07, 0x0b, 0x0d, 0x10,
		0x14, 0x15, 0x1b, 0x1f, 0x22, 0x28, 0x2a, 0x2d,
		0x31, 0x32, 0x33, 0x34, 0x36, 0x38, 0x39, 0x3b,
		0x3e, 0x40, 0x45, 0x49, 0x53, 0x54, 0x55, 0x56,
		0x5d, 0x5f, 0x62, 0x64, 0x65, 0x66, 0x68, 0x6b,
		0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x7b, 0x84,
		0x87, 0x89, 0x8a, 0x8d, 0x90, 0x91, 0x95, 0xa0,
		0xa2, 0xa9, 0xaa, 0xab, 0xad, 0xb0, 0xb5, 0xb6,
		0xb9, 0xbc, 0xc2, 0xc7, 0xcc, 0xd2, 0xd4, 0xd9,
		0xdf, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe9, 0xee,
		0xf1, 0xf4, 0xf5, 0xf6, 0xfd, 0xfe,
	}

	binarySet7 = [setSize]byte{
		0x01, 0x05, 0x0c, 0x11, 0x12, 0x13, 0x16, 0x19,
		0x1d, 0x1e, 0x23, 0x24, 0x29, 0x2b, 0x2c, 0x2f,
		0x35, 0x37, 0x3c, 0x41, 0x42, 0x46, 0x4a, 0x4b,
		0x4e, 0x4f, 0x50, 0x57, 0x58, 0x59, 0x5a, 0x5c,
		0x5e, 0x60, 0x69, 0x6a, 0x6c, 0x75, 0x77, 0x78,
		0x7a, 0x7e, 0x7f, 0x80, 0x83, 0x84, 0x85, 0x8b,
		0x8c, 0x8e, 0x8f, 0x92, 0x94, 0x97, 0x9b, 0x9e,
		0x9f, 0xa1, 0xa3, 0xa4, 0xa6, 0xa7, 0xaf, 0xb1,
		0xb3, 0xb7, 0xba, 0xbb, 0xc0, 0xc4, 0xc5, 0xc6,
		0xc9, 0xca, 0xce, 0xd7, 0xd8, 0xdc, 0xe9, 0xec,
		0xed, 0xf3, 0xf7, 0xfa, 0xfb, 0xfc,
	}
)

// Character Sets Arrays
var (
	printableBytes = []byte(printableSet) // Convert printableSet to []byte
)

// Mapping Tables
var (
	// byteToCharSet maps each set to a byte-to-char mapping array.
	byteToCharSet [numSets][totalBytes]int

	// charToByteSet maps each set to a char-to-byte mapping array.
	// Index 0 corresponds to char 0, up to char 128.
	charToByteSet [numSets][128]byte
)

// Initialize mapping tables
func init() {
	initializeMappings()
}

// initializeMappings populates the byteToCharSet and charToByteSet arrays.
func initializeMappings() {

	if len(printableBytes) < setSize {
		panic(fmt.Sprintf("Not enough printable bytes: %d of %d required", len(printableBytes), setSize))
	}

	// Fill byteToCharSet with 0 char if not mapped
	for set := 0; set < numSets; set++ {
		for b := 0; b < totalBytes; b++ {
			byteToCharSet[set][b] = -1
		}
	}

	// Populate Set1
	for i, b := range binarySet1 {
		r := printableBytes[i]
		byteToCharSet[0][b] = int(r)
		charToByteSet[0][r] = b
	}

	// Populate Set2
	for i, b := range binarySet2 {
		r := printableBytes[i]
		byteToCharSet[1][b] = int(r)
		charToByteSet[1][r] = b
	}

	// Populate Set3
	for i, b := range binarySet3 {
		r := printableBytes[i]
		byteToCharSet[2][b] = int(r)
		charToByteSet[2][r] = b
	}

	// Populate Set4
	for i, b := range binarySet4 {
		r := printableBytes[i]
		byteToCharSet[3][b] = int(r)
		charToByteSet[3][r] = b
	}

	// Populate Set5
	for i, b := range binarySet5 {
		r := printableBytes[i]
		byteToCharSet[4][b] = int(r)
		charToByteSet[4][r] = b
	}

	// Populate Set6
	for i, b := range binarySet6 {
		r := printableBytes[i]
		byteToCharSet[5][b] = int(r)
		charToByteSet[5][r] = b
	}

	// Populate Set7
	for i, b := range binarySet7 {
		r := printableBytes[i]
		byteToCharSet[6][b] = int(r)
		charToByteSet[6][r] = b
	}

	//// Verify that separator1 is not present in printableBytes
	//for i, r := range printableBytes {
	//	if r == separator1 {
	//		panic(fmt.Sprintf("Separator character is present in index %d", i))
	//	}
	//}
}

// Memory Pools for Encode and Decode
var encodePool = sync.Pool{
	New: func() interface{} {
		return make([]byte, 0, bufferSize)
	},
}

var decodePool = sync.Pool{
	New: func() interface{} {
		return make([]byte, 0, bufferSize)
	},
}

// Encode encodes the input bytes into a z3b-encoded string.
func Encode(data []byte) ([]byte, error) {
	l := len(data)
	estimatedSize := l * 4

	result := encodePool.Get().([]byte)
	defer encodePool.Put(result[:0])
	if cap(result) < estimatedSize {
		encodePool.Put(result[:0])
		result = make([]byte, 0, estimatedSize)
		//result = slices.Grow(result, estimatedSize)
	}
	result = result[:estimatedSize]

	currentSet := 0
	idx := 0
	for i, b := range data {

		r := byteToCharSet[currentSet][b]
		if r >= 0 && r <= totalBytes {
			result[idx] = byte(r)
			idx++
			continue
		}

		ch := make(chan [2]int)
		for j := 1; j < 7; j++ {
			go findChunk(currentSet, j, data[i:], ch)
		}

		bestSet := -1 // The current best set
		bestSize := 0 // How many characters can be presented in the best set
		received := 0
	events:
		for {
			select {
			case res := <-ch:
				j, size := res[0], res[1]
				//log.Printf("[%d]: Received +%d (%d bytes)", received, j, size)
				if bestSize < size {
					bestSet = j
					bestSize = size
				}

				received++
				if received >= 6 {
					break events
				}
			}
		}

		//log.Printf("Best found +%d (%d bytes)", bestSize, bestSize)

		switch bestSet {
		case 1:
			result[idx] = separator1
			idx++
		case 2:
			result[idx] = separator2
			idx++
		case 3:
			result[idx] = separator3
			idx++
		case 4:
			result[idx] = separator4
			idx++
		case 5:
			result[idx] = separator5
			idx++
		case 6:
			result[idx] = separator6
			idx++
		default:
			return nil, fmt.Errorf("failed to find encoding set for: '%c'", b)
		}

		currentSet = (currentSet + bestSet) % numSets
		r = byteToCharSet[currentSet][b]

		result[idx] = byte(r)
		idx++
	}

	return result[:idx], nil
}

func findChunk(currentSet, j int, next []byte, ch chan [2]int) {
	set := (currentSet + j) % numSets
	idx := 0
	for _, b := range next {
		r := byteToCharSet[set][b]
		if r == -1 {
			break
		}
		idx++
	}
	ch <- [2]int{j, idx}
}
func ReleaseDecodedBytes(decoded []byte) {
	decodePool.Put(decoded[:0])
}

// Decode decodes a z3b-encoded string back into bytes.
func Decode(encoded []byte) ([]byte, error) {
	l := len(encoded)

	decoded := decodePool.Get().([]byte)
	if cap(decoded) < l {
		decodePool.Put(decoded[:0])
		decoded = make([]byte, 0, l)
		//decoded = slices.Grow(decoded, l)
	}
	decoded = decoded[:l]

	currentSet := 0
	idx := 0
	for i := 0; i < l; i++ {
		c := encoded[i]

		switch c {
		case separator1:
			currentSet = (currentSet + 1) % numSets
			continue
		case separator2:
			currentSet = (currentSet + 2) % numSets
			continue
		case separator3:
			currentSet = (currentSet + 3) % numSets
			continue
		case separator4:
			currentSet = (currentSet + 4) % numSets
			continue
		case separator5:
			currentSet = (currentSet + 5) % numSets
			continue
		case separator6:
			currentSet = (currentSet + 6) % numSets
			continue
		}

		if c < 32 || c > 126 || c == invalidCharacter {
			return nil, fmt.Errorf("invalid character in encoded string: '%c'", c)
		}

		b := charToByteSet[currentSet][c]
		//if b == 0 && binarySet1[0] != 0 { // Assuming 0 is a valid byte, check if mapped
		//	return nil, fmt.Errorf("invalid character '%c' for set %d", c, currentSet+1)
		//}
		decoded[idx] = b
		idx++
	}
	return decoded[:idx], nil
}
